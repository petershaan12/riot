generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  ADMIN
  USER
  CHAPTER
  SPARTAN
}

enum AttendanceStatus {
  GOING
  ATTENDED
  ABSENT
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?     @unique
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole?   @default(USER)
  bio           String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  points        Int         @default(0) // Jumlah poin yang didapat dari kehadiran
  session       Session[]
  accounts      Account[]
  events        Event[]     @relation("UserEvents")
  attendances   Attendance[]
  tickets       Ticket[]

  @@index([points], name: "idx_user_points") // Index untuk mengurutkan user berdasarkan poin
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model Event {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       String
  url         String      @unique
  description String
  price       String?
  buildingName String
  location    String
  isFree      Boolean
  date        DateTime
  userId      String      @db.ObjectId
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation("UserEvents", fields: [userId], references: [id])
  attendances Attendance[]
  tickets     Ticket[]

  @@unique([title, date])
}

model Attendance {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String           @db.ObjectId
  userId    String           @db.ObjectId
  status    AttendanceStatus @default(GOING)
  phone     String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  points    Int             // Poin yang didapatkan dari kehadiran di event ini
  ticketId  String           @db.ObjectId

  ticket    Ticket           @relation(fields: [ticketId], references: [id])
  event     Event            @relation(fields: [eventId], references: [id])
  user      User             @relation(fields: [userId], references: [id],  onDelete: Cascade)

  @@unique([eventId, userId])
}

model Ticket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  userId    String   @db.ObjectId
  qrCodeImage String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id],  onDelete: Cascade)
  attendance Attendance[]
  @@unique([eventId, userId])
}